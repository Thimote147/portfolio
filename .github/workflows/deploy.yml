name: Deploy Portfolio

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📝 Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🧪 Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '✅ SSH connection successful'"

      - name: 🚀 Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            set -e
            
            echo "📁 Setting up deployment directory..."
            mkdir -p ~/websites
            cd ~/websites
            
            # Clean previous deployment
            if [ -d "portfolio" ]; then
              cd portfolio
              docker-compose down --remove-orphans || true
              docker container prune -f || true
              cd ..
              rm -rf portfolio
            fi
            
            echo "📥 Cloning repository..."
            git clone git@github.com:Thimote147/portfolio.git portfolio
            cd portfolio
            
            echo "🔧 Setting up environment..."
            cat > .env << EOF
          VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          EOF
            
            echo "🏗️  Building and deploying..."
            export VITE_EMAILJS_SERVICE_ID="${{ secrets.VITE_EMAILJS_SERVICE_ID }}"
            export VITE_EMAILJS_TEMPLATE_ID="${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}"
            export VITE_EMAILJS_PUBLIC_KEY="${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}"
            
            docker-compose build --no-cache
            docker-compose up -d
            
            echo "⏳ Waiting for container to be ready..."
            sleep 15
            
            # Vérifier que le container fonctionne
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Container is running"
              
              # Vérifier la santé de l'application
              ./health-check.sh http://localhost:7777
              
              echo "🎉 Deployment successful!"
            else
              echo "❌ Container failed to start!"
              docker-compose logs
              exit 1
            fi
          ENDSSH